# Copyright 2017 √çcaro Hoff
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#  Author: GalaticStryder
#

set_progress(0.000000);

# -- - CHECK ASSERTION - -- #
getprop("ro.product.device") == "!assert!" ||
      abort("This package is for \"!assert!\" devices; this is a \"" +
            getprop("ro.product.device") + "\".");

set_progress(0.01);

ui_print("Extracting temporary files...");
show_progress(0.03, 1600);
delete_recursive("/tmp/tools");
package_extract_dir("tools", "/tmp/tools");
set_metadata_recursive("/tmp/tools", "uid", 0, "gid", 0, "dmode", 0777, "fmode", 0777);
run_program("/sbin/mkdir", "/tmp/los_logs");

ui_print("Unmounting data and system partitions...");
ifelse(is_mounted("/data"), run_program("/tmp/tools/busybox", "umount", "/data"));
ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));

ui_print("Mounting data and system partitions...");
set_progress(0.032);
run_program("/tmp/tools/busybox", "mount", "/data");
run_program("/tmp/tools/busybox", "mount", "/system");

# -- - BACKUP ADDON.D - -- #
if (file_getprop("/tmp/aroma/install_mod.prop", "selected.0") == "1")
  then
  set_progress(0.035);
  ui_print("Running addon.d backup script...");
  set_metadata_recursive("/tmp/tools/addon", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0755);
  run_program("/tmp/tools/addon/backuptool.sh", "backup");
endif;

# -- - ERASE SYSTEM - -- #
set_progress(0.04);
ui_print("Wiping system partition...");
delete_recursive("/system");

ui_print("Unmounting system partition...");
ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));

set_progress(0.08);
ui_print("Cleaning deprecated files...");
delete_recursive("/sdcard/.android_secure");
delete_recursive("/sdcard/.bookmark_thumb1");
delete_recursive("/sdcard/.data");
delete_recursive("/sdcard/.tmp");
delete_recursive("/sdcard/bugreports");
delete_recursive("/sdcard/DCIM/.thumbnails");
delete_recursive("/sdcard/LazyList");
delete_recursive("/sdcard/LOST.DIR");
delete_recursive("/sdcard/tmp");

ui_print("Wiping cache and dalvik...");
delete_recursive("/data/dalvik-cache/*");
wipe_cache();

# -- - INSTALL SYSTEM - -- #
ui_print(" ");
ui_print("@Installing LibertineOS...");
ui_print(" ");

set_progress(0.10);
show_progress(0.50, 420000);
ui_print("Unmounting system partition...");
ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));
ui_print("Pushing system image to partition...");
block_image_update("/dev/block/bootdevice/by-name/system", package_extract_file("system.transfer.list"), "system.new.dat", "system.patch.dat") || abort("E1001: Failed to update system image.");
ui_print("Mounting system partition...");
run_program("/tmp/tools/busybox", "mount", "/system");

# -- - INSTALL KERNEL - -- #
set_progress(0.580000);
ui_print("Extracting boot image to partition...");
package_extract_file("boot.img", "/dev/block/bootdevice/by-name/boot");

# -- - INSTALL SPLASH - -- #
if (file_getprop("/tmp/aroma/install_mod.prop", "selected.3") == "1")
  then
  ui_print("Extracting splash image to partition...");
  package_extract_file("splash.img", "/dev/block/bootdevice/by-name/splash");
endif;

# -- - UPDATE FIRMWARE - -- #
if (file_getprop("/tmp/aroma/install_mod.prop", "selected.1") == "1")
  then
  set_progress(0.640000);
  ui_print("Pushing firmware files to partitions...");
  package_extract_file("firmware-update/cmnlib64.mbn", "/dev/block/bootdevice/by-name/cmnlib64");
  package_extract_file("firmware-update/ddr.mbn", "/dev/block/bootdevice/by-name/ddr");
  package_extract_file("firmware-update/cmnlib.mbn", "/dev/block/bootdevice/by-name/cmnlib");
  package_extract_file("firmware-update/hyp.mbn", "/dev/block/bootdevice/by-name/hyp");
  package_extract_file("firmware-update/pmic.elf", "/dev/block/bootdevice/by-name/pmic");
  package_extract_file("firmware-update/tz.mbn", "/dev/block/bootdevice/by-name/tz");
  package_extract_file("firmware-update/emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/aboot");
  package_extract_file("firmware-update/rpm.mbn", "/dev/block/bootdevice/by-name/rpm");
  package_extract_file("firmware-update/devcfg.mbn", "/dev/block/bootdevice/by-name/devcfg");
  package_extract_file("firmware-update/xbl.elf", "/dev/block/bootdevice/by-name/xbl");
  package_extract_file("firmware-update/keymaster.mbn", "/dev/block/bootdevice/by-name/keymaster");
  package_extract_file("firmware-update/cmnlib64.mbn", "/dev/block/bootdevice/by-name/cmnlib64bak");
  package_extract_file("firmware-update/cmnlib.mbn", "/dev/block/bootdevice/by-name/cmnlibbak");
  package_extract_file("firmware-update/hyp.mbn", "/dev/block/bootdevice/by-name/hypbak");
  package_extract_file("firmware-update/pmic.elf", "/dev/block/bootdevice/by-name/pmicbak");
  package_extract_file("firmware-update/tz.mbn", "/dev/block/bootdevice/by-name/tzbak");
  package_extract_file("firmware-update/emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/abootbak");
  package_extract_file("firmware-update/rpm.mbn", "/dev/block/bootdevice/by-name/rpmbak");
  package_extract_file("firmware-update/xbl.elf", "/dev/block/bootdevice/by-name/xblbak");
  package_extract_file("firmware-update/keymaster.mbn", "/dev/block/bootdevice/by-name/keymasterbak");
  package_extract_file("firmware-update/NON-HLOS.bin", "/dev/block/bootdevice/by-name/modem");
  package_extract_file("firmware-update/adspso.bin", "/dev/block/bootdevice/by-name/dsp");
  package_extract_file("firmware-update/BTFM.bin", "/dev/block/bootdevice/by-name/bluetooth");
  package_extract_file("firmware-update/devinfo.bin", "/dev/block/bootdevice/by-name/devinfo");
endif;

# -- - RESTORE ADDON.D - -- #
if (file_getprop("/tmp/aroma/install_mod.prop", "selected.0") == "1")
  then
  ui_print("Running addon.d restore script...");
  run_program("/tmp/tools/addon/backuptool.sh", "restore");
endif;

delete_recursive("/tmp/tools/addon/");

# -- - LOCKSCREEN PASSWORD - -- #
if (file_getprop("/tmp/aroma/install_mod.prop", "selected.2") == "1")
  then
  run_program("/tmp/tools/busybox", "mount", "/data");
  set_metadata("/tmp/fix_passwd.sh", "uid", 0, "gid", 0, "mode", 0777);
  ui_print("Cleaning ROM lockscreen password...");
  run_program("/tmp/fix_passwd.sh");
endif;

# -- - TRIMMING - -- #
ui_print("Trimming cache...");
run_program("/tmp/tools/busybox", "fstrim", "/cache");
ui_print("Trimming data...");
run_program("/tmp/tools/busybox", "fstrim", "/data");

# -- - MOD - -- #
set_progress(0.720000);
ui_print(" ");
ui_print("@Applying custom modifications...");
ui_print(" ");

# -- - NO ROOT - -- #
if (file_getprop("/tmp/aroma/aromaroot.prop", "rootmethod") == "0")
  then
  ui_print("Shipping the device unrooted...");
endif;

# -- - SUPERSU - -- #
if (file_getprop("/tmp/aroma/aromaroot.prop", "rootmethod") == "1")
  then
  ui_print("Installing system-less SuperSU...");
  run_program("/tmp/tools/busybox", "mv", "/tmp/tools/supersu", "/tmp/supersu");
  run_program("/tmp/supersu/META-INF/com/google/android/update-binary", "dummy", "../../../tmp/los_logs/supersu.log", "/tmp/supersu/supersu.zip");
  run_program("/tmp/tools/busybox", "mount", "/system");
endif;

delete_recursive("/tmp/supersu");

# -- - MAGISK - -- #
if (file_getprop("/tmp/aroma/aromaroot.prop", "rootmethod") == "2")
  then
  ui_print("Installing magisk framework...");
  run_program("/tmp/tools/magisk/install.sh");
  ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));
  run_program("/tmp/tools/busybox", "mkdir", "-p", "/dev/tmp");
  run_program("/tmp/tools/busybox", "mv", "/tmp/tools/magisk", "/dev/tmp/magisk");
  run_program("/dev/tmp/magisk/META-INF/com/google/android/update-binary", "dummy", "../../../tmp/los_logs/magisk.log", "/tmp/magisk/magisk.zip");
  run_program("/tmp/tools/busybox", "mount", "/system");

  if (file_getprop("/tmp/aroma/mod.prop", "item.1.5") == "1")
    then
    ui_print("Installing A.R.I.S.E. magisk module...");
    run_program("/sbin/mkdir", "/tmp/arise4magisk");
    run_program("/sbin/unzip", "/tmp/tools/arise4magisk/arise4magisk.zip", "META-INF/com/google/android/*", "-d", "/tmp/arise4magisk");
    run_program("/sbin/sh", "/tmp/arise4magisk/META-INF/com/google/android/update-binary", "dummy", "../../../tmp/los_logs/arise4magisk.log", "/tmp/tools/arise4magisk/arise4magisk.zip");
  endif;
endif;

delete_recursive("/tmp/magisk");

# -- - ARISE - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.5") == "1")
  then
  ui_print("Installing A.R.I.S.E sound system...");
  ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));
  run_program("/tmp/tools/busybox", "mkdir", "/tmp/arise");
  run_program("/tmp/tools/busybox", "unzip", "/tmp/tools/arise/arise.zip", "META-INF/com/google/android/*", "-d", "/tmp/arise");
  package_extract_dir("tools/arise", "/tmp/arise");
  set_metadata("/tmp/arise/META-INF/com/google/android/update-binary", "uid", 0, "gid", 0, "mode", 0777);
  set_metadata_recursive("/tmp/arise", "uid", 0, "gid", 0, "dmode", 0777, "fmode", 0777);
  run_program("/sbin/busybox", "sh", "/tmp/arise/META-INF/com/google/android/update-binary", "dummy", "../../../tmp/los_logs/arise.log", "/tmp/arise/arise.zip");
  run_program("/tmp/tools/busybox", "mount", "/system");
endif;

delete_recursive("/tmp/arise");
delete_recursive("/tmp/tools/arise");

# -- - XPOSED - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.1") == "1")
  then
  set_progress(0.880000);
  ui_print("Installing Xposed installer...");
endif;

if (file_getprop("/tmp/aroma/mod.prop", "item.1.1") == "0")
  then
  set_progress(0.880000);
  ui_print("Removing Xposed installer...");
  delete_recursive("/system/app/XposedInstaller");
  delete_recursive("/data/app/XposedInstaller");
endif;

# -- - ADAWAY - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.2") == "1")
  then
  set_progress(0.900000);
  ui_print("Installing AdAway app...");
endif;

if (file_getprop("/tmp/aroma/mod.prop", "item.1.2") == "0")
  then
  set_progress(0.900000);
  ui_print("Removing AdAway app...");
  delete_recursive("/system/app/Adaway");
  delete_recursive("/data/app/Adaway");
endif;

# -- - ADB - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.3") == "1")
  then
  set_progress(0.920000);
  ui_print("Forcing persistent ADB...");
  run_program("/tmp/tools/adb.sh");
endif;

# -- - GOOGLE DNS - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.4") == "1")
  then
  set_progress(0.925000);
  ui_print("Setting Google DNS...");
  run_program("/tmp/tools/google_dns.sh");
endif;

# -- - WIDEBAND WIFI - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.6") == "1")
  then
  set_progress(0.930000);
  ui_print("Enabling wideband Wi-Fi...");
  run_program("/tmp/tools/wideband_wifi.sh");
endif;

# -- - APTX - -- #
if (file_getprop("/tmp/aroma/mod.prop", "item.1.7") == "1")
  then
  ui_print("Adding APTX/APTXHD support...");
endif;

if (file_getprop("/tmp/aroma/mod.prop", "item.1.7") == "0")
  then
  ui_print("Removing APTX/APTXHD support...");
  run_program("/tmp/tools/aptx/remove.sh");
endif;

# -- - SYSTEM APPS - -- #
set_progress(0.940000);
ui_print(" ");
ui_print("@Customizing your system applications...");
ui_print(" ");
run_program("/tmp/tools/apps_remover.sh", "sapos.prop", "1");

# -- - GOOGLE APPS - -- #
set_progress(0.960000);
ui_print("Shipping the ROM without Google apps...");

# -- - FINISH - -- #
set_progress(0.990000);
ui_print(" ");
ui_print("@Finished");
ui_print(" ");
ui_print("Saving installation logs...");
run_program("/tmp/tools/save_logs.sh");
ui_print("Unmounting data and system partitions...");
ifelse(is_mounted("/data"), run_program("/tmp/tools/busybox", "umount", "/data"));
ifelse(is_mounted("/system"), run_program("/tmp/tools/busybox", "umount", "/system"));
ui_print("Done!");
set_progress(1);
